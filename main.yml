---
- hosts: localhost
  connection: local
  gather_facts: no
  become: no

  vars:
    user_name:
    set_pass: N
    user_pass:
    create_group: N
    group_name:
    add_user_to_group: N
    create_access_keys: N
    email_id_pattern: '^([a-zA-Z0-9_\-\.]+)@([a-zA-Z0-9_\-\.]+)\.([a-zA-Z]{2,3})$'

  tasks:

    - debug: msg="{{validate_emailid}}"
      when: user_name is not match(email_id_pattern)

    - block:
      - name: validating email id
        debug: msg="{{user_name}} matches mail id pattern"

      - name: create group
        iam:
          iam_type: group
          name: "{{ group_name }}"
          state: present
        when:
          - create_group == 'Y'
          - group_name != 'null'

      - name: create user only
        iam:
          iam_type: user
          name: "{{ user_name }}"
          state: present
        when:
          - user_name != 'null'

      - name: update user with password (console access)
        iam:
          iam_type: user
          name: "{{ user_name }}"
          state: update
          password: "{{ user_pass }}"
        when:
          - user_name != 'null'
          - user_pass != 'null'
          - set_pass == 'Y'

      - name: add user to group {{group_name}}
        iam:
          iam_type: user
          name: "{{ user_name }}"
          state: update
          groups: "{{ group_name }}"
        when:
          - user_name != 'null'
          - user_pass != 'null'
          - add_user_to_group == 'Y'
          - group_name != 'null'

      - name: update user for programmatic access (access keys)
        command: aws iam create-access-key --user-name {{user_name}}
        register: credentials

      - name: print out the credentials
        debug: msg="{{credentials.stdout}}"

      - name: notifying the user
        sns:
          msg: "{{credentials.stdout}}"
          subject: "PierianDx AWS User Credentials"
          topic: "arn:aws:sns:us-west-2:..."
      
      when: user_name is match(email_id_pattern)